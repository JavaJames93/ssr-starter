{"ast":null,"code":"import ApolloClient, { ApooloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport withApollo from \"next-with-apollo\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\"; //Update the GraphQL endpoint to any instance of GraphQL that you like\n\nvar GRAPHQL_URL = process.env.BACKEND_URL || \"http://localhost:1337/graphql\";\nvar link = createHttpLink({\n  fetch: fetch,\n  // Switches between unfetch & node-fetch for client & server\n  uri: GRAPHQL_URL\n}); // Export a HOC from next-with-apollo\n// Docs: https://www.npmjs.com/package/next-with-apollo\n\nexport default withApollo( // You can get header and ctx (context) from the callback params\n// e.g. ({ headers, ctx, initialState })\nfunction (_ref) {\n  var initialState = _ref.initialState;\n  return new ApolloClient({\n    link: link,\n    ssrMode: false,\n    cache: new InMemoryCache() // rehydrate the cache using the initial data passed from the server\n    .restore(initialState || {})\n  });\n}, {\n  getDataFromTree: 'never'\n});","map":{"version":3,"sources":["C:/Users/FELIXA4/source/repos/next-fb-cms-starter/app/src/utils/apollo.js"],"names":["ApolloClient","ApooloClient","InMemoryCache","withApollo","createHttpLink","fetch","GRAPHQL_URL","process","env","BACKEND_URL","link","uri","initialState","ssrMode","cache","restore","getDataFromTree"],"mappings":"AAAA,OAAOA,YAAP,IAAuBC,YAAvB,QAA2C,eAA3C;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,+BAA/C;AAEA,IAAMC,IAAI,GAAGN,cAAc,CAAC;AACxBC,EAAAA,KAAK,EAALA,KADwB;AACjB;AACPM,EAAAA,GAAG,EAAEL;AAFmB,CAAD,CAA3B,C,CAKA;AACA;;AACA,eAAeH,UAAU,EACrB;AACA;AACA;AAAA,MAAGS,YAAH,QAAGA,YAAH;AAAA,SACI,IAAIZ,YAAJ,CAAiB;AACbU,IAAAA,IAAI,EAAEA,IADO;AAEbG,IAAAA,OAAO,EAAE,KAFI;AAGbC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ,GACH;AADG,KAEFa,OAFE,CAEMH,YAAY,IAAI,EAFtB;AAHM,GAAjB,CADJ;AAAA,CAHqB,EAWnB;AAAEI,EAAAA,eAAe,EAAE;AAAnB,CAXmB,CAAzB","sourcesContent":["import ApolloClient, { ApooloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport withApollo from \"next-with-apollo\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport fetch from \"isomorphic-unfetch\";\r\n\r\n//Update the GraphQL endpoint to any instance of GraphQL that you like\r\nconst GRAPHQL_URL = process.env.BACKEND_URL || \"http://localhost:1337/graphql\";\r\n\r\nconst link = createHttpLink({\r\n    fetch, // Switches between unfetch & node-fetch for client & server\r\n    uri: GRAPHQL_URL\r\n});\r\n\r\n// Export a HOC from next-with-apollo\r\n// Docs: https://www.npmjs.com/package/next-with-apollo\r\nexport default withApollo(\r\n    // You can get header and ctx (context) from the callback params\r\n    // e.g. ({ headers, ctx, initialState })\r\n    ({ initialState}) =>\r\n        new ApolloClient({\r\n            link: link,\r\n            ssrMode: false,\r\n            cache: new InMemoryCache()\r\n                // rehydrate the cache using the initial data passed from the server\r\n                .restore(initialState || {})\r\n        })\r\n    , { getDataFromTree: 'never' }\r\n);"]},"metadata":{},"sourceType":"module"}